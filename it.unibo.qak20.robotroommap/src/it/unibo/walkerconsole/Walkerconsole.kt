/* Generated by AN DISI Unibo */ 
package it.unibo.walkerconsole

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Walkerconsole ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "waitCmd"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		 	val inmapname          = "mapRoomExplored"
		return { //this:ActionBasciFsm
				state("waitCmd") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.loadRoomMap( inmapname  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						consolegui.consoleGuiCoap.create( "localhost", "8043", "walkerconsole"  )
					}
					 transition(edgeName="t03",targetState="handleCmd",cond=whenDispatch("cmd"))
				}	 
				state("handleCmd") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("cmd(MOVE)"), Term.createTerm("cmd(M)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								val move = payloadArg(0)  
								if(  move =="start"  
								 ){request("movetoCell", "movetoCell(5,3)" ,"optimisticwalker" )  
								}
						}
					}
					 transition(edgeName="t04",targetState="showAnswer",cond=whenReply("atcell"))
					transition(edgeName="t05",targetState="showAnswer",cond=whenReply("stepfail"))
				}	 
				state("showAnswer") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
