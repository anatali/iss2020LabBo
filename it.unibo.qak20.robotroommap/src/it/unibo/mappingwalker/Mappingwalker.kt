/* Generated by AN DISI Unibo */ 
package it.unibo.mappingwalker

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Mappingwalker ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
		var NumStep      = 0  
		var GoalOk       = true
		val StepTime     = 350
		var StartTime    = 0L
		var Workduration = 0L    
		var CurrentPlannedMove = ""
		val inmapname    = "mapRoomEmpty"
		val outmapname   = "mapRoomExplored"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("robotmapper | START")
						discardMessages = false
						itunibo.planner.plannerUtil.initAI(  )
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						delay(300) 
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						delay(300) 
						itunibo.planner.plannerUtil.loadRoomMap( inmapname  )
						updateResourceRep( "initial"  
						)
					}
					 transition( edgeName="goto",targetState="exploreDirties", cond=doswitch() )
				}	 
				state("exploreDirties") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.resetActions(  )
						itunibo.planner.plannerUtil.planForNextDirty(  )
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitchGuarded({ itunibo.planner.plannerUtil.existActions()  
					}) )
					transition( edgeName="goto",targetState="endOfJob", cond=doswitchGuarded({! ( itunibo.planner.plannerUtil.existActions()  
					) }) )
				}	 
				state("execPlannedMoves") { //this:State
					action { //it:State
						  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() 
						 			//println("			execPlannedMovessssss = $CurrentPlannedMove")
					}
					 transition( edgeName="goto",targetState="wMove", cond=doswitchGuarded({ CurrentPlannedMove == "w"  
					}) )
					transition( edgeName="goto",targetState="otherPlannedMove", cond=doswitchGuarded({! ( CurrentPlannedMove == "w"  
					) }) )
				}	 
				state("wMove") { //this:State
					action { //it:State
						request("step", "step($StepTime)" ,"basicrobot" )  
					}
					 transition(edgeName="t00",targetState="stepDone",cond=whenReply("stepdone"))
					transition(edgeName="t01",targetState="stepFail",cond=whenReply("stepfail"))
				}	 
				state("otherPlannedMove") { //this:State
					action { //it:State
						if(  CurrentPlannedMove == "l" || CurrentPlannedMove == "r"   
						 ){forward("cmd", "cmd($CurrentPlannedMove)" ,"basicrobot" ) 
						delay(300) 
						itunibo.planner.plannerUtil.updateMap( "$CurrentPlannedMove"  )
						}
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitchGuarded({ CurrentPlannedMove.length > 0  
					}) )
					transition( edgeName="goto",targetState="exploreDirties", cond=doswitchGuarded({! ( CurrentPlannedMove.length > 0  
					) }) )
				}	 
				state("backToHome") { //this:State
					action { //it:State
						println("GOING BACK to HOME ... ")
						if(  ! itunibo.planner.plannerUtil.atHome()  
						 ){itunibo.planner.plannerUtil.planForGoal( "0", "0"  )
						}
						else
						 {println("AT HOME !!")
						 }
					}
					 transition( edgeName="goto",targetState="endWork", cond=doswitchGuarded({ itunibo.planner.plannerUtil.atHome()  
					}) )
					transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitchGuarded({! ( itunibo.planner.plannerUtil.atHome()  
					) }) )
				}	 
				state("stepDone") { //this:State
					action { //it:State
						updateResourceRep( "stepDone "  
						)
						itunibo.planner.plannerUtil.updateMap( "w"  )
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitch() )
				}	 
				state("stepFail") { //this:State
					action { //it:State
						println("				robotmapper | stepFail  ")
						
						 			var Dt = 0L 			
						if( checkMsgContent( Term.createTerm("stepfail(DURATION,CAUSE)"), Term.createTerm("stepfail(DURATION,CAUSE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Dt = payloadArg(0).toLong()   
								if(  Dt < 3*StepTime/4.0   
								 ){forward("cmd", "cmd(s)" ,"basicrobot" ) 
								delay(Dt)
								forward("cmd", "cmd(h)" ,"basicrobot" ) 
								}
								itunibo.planner.plannerUtil.updateMapObstacleOnCurrentDirection(  )
								itunibo.planner.plannerUtil.showCurrentRobotState(  )
								updateResourceRep( "stepFail"  
								)
						}
					}
					 transition( edgeName="goto",targetState="exploreDirties", cond=doswitch() )
				}	 
				state("endWork") { //this:State
					action { //it:State
						Workduration = getDuration(StartTime)
						println("robotmapper | ends; duration=$Workduration")
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						itunibo.planner.plannerUtil.saveRoomMap( outmapname  )
						updateResourceRep( "terminated"  
						)
						terminate(0)
					}
				}	 
				state("endOfJob") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.getDuration(  )
					}
					 transition( edgeName="goto",targetState="backToHome", cond=doswitch() )
				}	 
			}
		}
}
