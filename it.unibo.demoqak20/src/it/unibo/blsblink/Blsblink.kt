/* Generated by AN DISI Unibo */ 
package it.unibo.blsblink

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Blsblink ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var odd         = true 
		 		var toutCounter = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						resources.bls.kotlin.buttonEventEmitter.create(myself ,"blink/unblink" )
					}
					 transition( edgeName="goto",targetState="waitclick", cond=doswitch() )
				}	 
				state("waitclick") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="startblink",cond=whenEvent("local_buttonCmd"))
					transition(edgeName="t01",targetState="endOfWork",cond=whenEvent("end"))
				}	 
				state("endOfWork") { //this:State
					action { //it:State
						println("blsblink BYE")
						terminate(0)
					}
				}	 
				state("startblink") { //this:State
					action { //it:State
						if(  odd  
						 ){updateResourceRep( "ledCmdOn"  
						)
						forward("ledCmd", "ledCmd(on)" ,"led" ) 
						}
						else
						 {updateResourceRep( "ledCmdOff"  
						 )
						 forward("ledCmd", "ledCmd(off)" ,"led" ) 
						 }
						 odd = !odd  
						stateTimer = TimerActor("timer_startblink", 
							scope, context!!, "local_tout_blsblink_startblink", 500.toLong() )
					}
					 transition(edgeName="t02",targetState="startblink",cond=whenTimeout("local_tout_blsblink_startblink"))   
					transition(edgeName="t03",targetState="waitclick",cond=whenEvent("local_buttonCmd"))
					transition(edgeName="t04",targetState="endOfWork",cond=whenEvent("end"))
				}	 
			}
		}
}
