/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
			var counter = 0 
			val leddev = resources.bls.kotlin.led.create()	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("led started")
						 leddev.turnOff()  
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("led waits ...")
					}
					 transition(edgeName="t03",targetState="handleLedCmd",cond=whenDispatch("ledCmd"))
				}	 
				state("handleLedCmd") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("ledCmd(X)"), Term.createTerm("ledCmd(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val Cmd = payloadArg(0)
											   counter++
								if(  Cmd == "on"  
								 ){println("led ON counter=$counter")
								 leddev.turnOn()  
								updateResourceRep( "ledOn"  
								)
								}
								else
								 {println("led OFF counter=$counter")
								  leddev.turnOff()  
								 updateResourceRep( "ledOff"  
								 )
								 }
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
